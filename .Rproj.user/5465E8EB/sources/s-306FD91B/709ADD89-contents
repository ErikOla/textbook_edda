---
output:
  pdf_document: default
  html_document: default
---
```{r echo = F}
knitr::opts_chunk$set(out.width = "100%")
knitr::opts_chunk$set(message = F)
```

# [Lecture notes] Data visualizatie

```{r include = F}
library(tidyverse)
library(nycflights13)
library(lubridate)
library(ggmosaic)
library(treemapify)
library(ggthemes)
data <- flights %>%
	inner_join(airports, by = c("dest"="faa")) %>%
	inner_join(airlines, by= "carrier") %>%
	select(-carrier, -tailnum, -flight, -dest, -dep_time, -arr_time, destination = name.x, -tz, -dst, airline = name.y, -alt) %>%
	unite(departure_date, day, month, year, hour, minute, sep="-") %>%
	mutate(departure_date = dmy_hm(departure_date)) %>%
	filter(!is.na(departure_date)) %>%
	mutate(destination = as.factor(destination), origin = as.factor(origin)) %>%
  rename(luchthaven = origin, maatschappij = airline, datum = departure_date, vertrek_vertraging = dep_delay, aankomst_vertraging = arr_delay, afstand=distance, vliegtijd = air_time) %>%
  select(luchthaven, maatschappij, datum, vertrek_vertraging, aankomst_vertraging, afstand, vliegtijd)
```


* Vaak de eerste stap om zicht te krijgen op de data.
* Relatief eenvoudig om patronen te zien, maar minder geschikt om exacte waarden te zien. 
* We moeten hierbij onderscheid maken tussen exploratieve visualisaties en informatieve visualisaties om een boodschap over te brengen.
    * Exploratieve visualisaties dienen om snel inzicht te krijgen in patronen in de data. Men besteedt hierbij veel minder aandacht aan de opmaak van de visualisatie. Vaak is deze visualisatie tijdelijk en niet bedoeld voor communicatie naar derden.
    * Communicatieve visualisaties dienen om een boodschap over te brengen aan derden. Hier dient men heel veel aandacht te besteden aan de opmaak zodat de boodschap duidelijk en helder gecommuniceerd wordt.
* We kunnen bij exploratieve visualisaties een onderscheid maken tussen univariate, bivariate en multivariate visualisaties.

De grafieken in dit hoofdstuk zijn gebaseerd op volgende dataset omtrent vluchten vertrekkende uit New York. 

```{r echo = F}
data %>% 
  glimpse()
```

## Univariate visualisaties (1 variabele)

* Als we slechts 1 variabele bestuderen, dan zijn we voornamelijk geïnteresseerd in de spreiding van de data. Dit wordt de verdeling van de data genoemd.
* Welke vragen kunnen we beantwoorden met dit soort visualisaties?
    * Wat is de meest voorkomende waarde van de data? Dit wordt ook de modus genoemd.
    * Bezit de data 1 modus, i.e. 1 waarde die duidelijk dominant is, of meerdere modi?
        * Indien er slechts 1 afgetekende modus is, dan wordt de verdeling unimodaal genoemd.
        * Indien er meerdere modi zijn (dominante waarden), dan wordt de verdeling multimodaal genoemd.
        * Een multimodale verdeling kan er op wijzen dat de objecten in je data niet allemaal van hetzelfde type zijn en dat je in feiten twee populaties in je data aanwezig hebt.
    * Is de data geconcentreerd rond de modus of eerder breed verspreid. Met andere woorden, wat is de spreiding? Dit geeft inzicht in de variabiliteit van de data.
    * Is de data gelijkmatig verdeeld aan weerszijden van de modus of zien we duidelijk meer data aan één zijde van de verdeling? Indien er meer data aan één zijde van de verdeling ligt (ten opzichte van de modus) dan zegt men dat de verdeling asymetrisch verdeeld is.
    * Zijn er waardes die opmerkelijk ver van de modus verwijderd zijn en geïsoleerd zijn van andere observaties? Dit worden extreme waarden of outliers genoemd. Deze verdienen meestal extra aandacht.

### Categorische variabele

#### Staafdiagram

```{r echo = F}
knitr::opts_chunk$set(fig.width = 6, fig.asp = 0.6)
```


  * Op de X-as staan de verschillende waardes van de categorische variabele. (Fig. \@ref(fig:2-3a))
  * Bij iedere waarde tekenen we een verticale balk die aangeeft hoe vaak die waarde in de dataset voorkomt.

```{r 2-3a, cache=T, echo = F, fig.cap="Staafdiagram luchthavens"}
ggplot(data, aes(x=luchthaven)) + 
  geom_bar(fill = "lightgrey") +
  theme_minimal()
``` 
    
  * Minder geschikt indien er veel waarden zijn. Dan wordt de X-as snel onleesbaar.(Fig. \@ref(fig:2-3b))
  
```{r 2-3b, cache=T, echo = F, fig.cap = "Staafdiagram maatschappijen"}
ggplot(data, aes(x=maatschappij)) + 
  geom_bar(fill = "lightgrey") +
  theme_minimal()
```
  * Je kan natuurlijk de labels roteren. Maar dit kan nog steeds onhandig zijn om te lezen. (Fig. \@ref(fig:2-3c)).

```{r 2-3c, cache=T, echo = F, fig.cap = "Staafdiagram met geroteerde labels"}
ggplot(data, aes(x=maatschappij)) + 
  geom_bar(fill = "lightgrey") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle=90, hjust=1))
```

  * In geval van een __nominale__ variabele zijn er twee mogelijkheden om de waarden te rangschikken:
    * Alfabetisch. (standaard) Dit is handig om snel waarden terug te vinden.
    * Volgens frequentie. Dit is handig om snel te zien welke waarden vaak/weinig voorkomen en geeft ook een beter beeld van de verdeling van de waarden. (Fig. \@ref(fig:2-3d))
        
        
```{r 2-3d, cache=T, echo = F, fig.cap = "Staafdiagram gesorteerd op frequentie"}
ggplot(data, aes(x= fct_infreq(maatschappij))) + 
  geom_bar(fill = "lightgrey") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle=90, hjust=1))
```        

* In het geval van een __ordinale__ variabele houd je best de intrinsieke volgorde van de waarden aan. 
        
* Je kan ook een horizontaal staafdiagram maken. (Fig. \@ref(fig:2-3e))
    * Zelfde principe, maar dan met horizontale balken.
    * Is handiger om de verschillende waarden te lezen, vooral indien dit er veel zijn. 
        

```{r 2-3e, cache=T, echo = F, fig.cap = "Verticaal staafdiagram gesorteerd op frequentie"}
ggplot(data, aes(x= fct_infreq(maatschappij))) + 
  geom_bar(fill = "lightgrey") +
  theme_minimal() +
  coord_flip()
```

#### Dotplot 

* In plaats van balken te gebruiken om de frequentie van een waarde aan te geven, kan je dit ook met punten doen. (Fig. \@ref(fig:2-5a))

* Een dotplot laat duidelijker zien waar de sprongen in de verdeling zit. Daarom is de dotplot vooral relevant als je de waarden ordent volgens frequentie.
```{r 2-5a, cache=T, echo = F, fig.cap = "Dotplot maatschappij"}
ggplot(data, aes(x=fct_infreq(maatschappij))) + 
  geom_point(stat = "count", aes(y=..count..)) +
  theme_minimal()
```

* Net als de barplot kan je zowel een verticale als horizontale dotplot maken. (Fig. \@ref(fig:2-5b))
    
```{r 2-5b, cache=T, echo= F, fig.cap = "Verticale dotplot"}
ggplot(data, aes(x=fct_infreq(maatschappij))) + 
  geom_point(stat = "count", aes(y=..count..)) + 
  coord_flip() +
  theme_minimal()
```

#### 'Stacked' staafdiagram

 * We maken nu slechts 1 kolom. Iedere waarde is een andere kleur en neemt een deel van de balk in beslag. De volledige balk stelt 100% van de data voor. (Fig. \@ref(fig:2-6a))
 * Kan nuttig zijn om data cumulatief te bestuderen. 
 * Hiermee kunnen we vragen beantwoorden zoals: "Welke waarden moeten we nemen om met zo weinig mogelijk waarden x% van de objecten te hebben?"
    
```{r 2-6a, cache=T, fig.cap = "Stacked barplot", echo = F, fig.asp = 1, out.width = "70%", fig.width = 4, fig.align = "center"}
ggplot(data, aes(x="Luchthaven", fill = fct_infreq(luchthaven))) + 
  geom_bar(position="fill", color = "white") + 
  xlab("")+
  theme_minimal() +
  scale_fill_economist()
```

* We kunnen ook horizontale versies maken. (Fig. \@ref(fig:2-6b))

```{r 2-6b, cache=T, fig.cap = "Horizontale stacked barplot", echo = F, fig.asp = 0.4}
ggplot(data, aes(x="Luchthaven", fill = fct_infreq(luchthaven))) + 
  geom_bar(position="fill", color = "white") + 
  xlab("")+
  theme_minimal() +
  scale_fill_economist() +
  coord_flip()
```

* Univariate stacked barcharts kunnen soms wat _raar_ overkomen. Vaak komt een gewone barchart beter over. 

#### Andere soorten

- treemap: indelen van rechthoekige oppervlakte volgens categorische variabelen
- pie chart
    * Moeilijk te interpreteren.
    * Verschillen tussen waarden zijn enkel duidelijk bij grote verschillen, terwijl barplots en dotplots deze ook bij kleine verschillen kunnen tonen.
    * Voor cumulatieve analyses van de data zijn barplots beter omdat het hier eenvoudiger is om af te leiden waar x% zicht bevindt.

### Continue variabele

#### Histogram

* Analoog met barplot, alleen gaan we hier eerst onze "categorieën" definiëren. (Fig. \@ref(fig:2-7a))
* Dit wordt 'binning' genoemd en wordt bepaald door een bin-breedte te kiezen.
* Je kan de binbreedte rechtstreeks kiezen of bepalen door vast te leggen hoeveel categorieën/bins je wenst.


```{r 2-7a, cache=T, echo = F, fig.cap = "Histogram with binwidth 1000"}
ggplot(data, aes(x=afstand)) + 
  geom_histogram(binwidth=1000, fill = "lightgrey", color = "white") +
  theme_minimal()
```      
        
  * Voor de visualisatie, worden alle waarden gegroepeerd per 'bin'.
  * De binbreedte kan een enorme impact hebben op het uitzicht van de verdeling. (Fig. \@ref(fig:2-7b) - \@ref(fig:2-7c))
      * Hoe breder de bins, hoe minder modi je kan detecteren.
      * Hoe smaller de bins, hoe meer modi je gaat zien, hoewel dit niet altijd even betekenisvol is.
      * Hoe smaller de bins, hoe minder data er in iedere bin gaat zitten en dan kunnen patronen wel in jouw dataset bestaan maar louter ten gevolge van toeval.
  

```{r 2-7b, cache=T, echo = F, fig.cap = "Histogram with binwidth 250"}
ggplot(data, aes(x=afstand)) + 
  geom_histogram(binwidth=250, fill = "lightgrey", color = "white") +
  theme_minimal()
```

```{r 2-7c, cache=T, echo = F, fig.cap = "Histogram with binwidth 50"}
ggplot(data, aes(x=afstand)) + 
  geom_histogram(binwidth=50, fill = "lightgrey", color = "white") +
  theme_minimal()
```

#### Density

* Variant van histogram.
* In plaats van staven wordt er een curve getekend. (Fig. \@ref(fig:2-density))
* De oppervlakte onder de curve is steeds gelijk aan 1
* Hoe hoger de curve, hoe meer observaties ter hoogt van deze waarde (hoe hoger de densiteit)
* De waarde van de y-as heeft geen directe betekenis.

```{r 2-density, echo = F, fig.cap = "Density plot", cache = T}
ggplot(data, aes(x = afstand)) +
  geom_density() +
  theme_minimal()
```


#### Boxplot
 * De lijn in het midden duidt de mediaan aan. Dit betekent dat 50% van je data onder deze lijn ligt, terwijl 50% er boven ligt. (Fig. \@ref(fig:2-8))
 * De box in het midden duidt de middelste 50% van je data aan. Dit wordt ook de interkwartiel-box genoemd. Dit betekent dat 25% van je data onder deze box zit en nog eens 25% boven deze box ligt. Hoe groter de box, des te meer de data gespreid is.
 * Indien de box aan één zijde van de mediaanlijn groter is dan aan de andere zijde, dan wijst dit er op dat de data meer gespreid is aan die kant.
 * De "whiskers" geven de laatste datapunten aan die als "normaal" beschouwd worden. Datapunten buiten deze grenzen beschouwt een boxplot als outliers of extreme waarden.
 * De grens waar data van normaal naar extreem overgaat wordt door de boxplot bepaald door anderhalf keer de grootte van de interkwartiel-box op te tellen (en af te trekken) van de bovenste (onderste) grens van de interkwartiel-box. Punten die hier buiten liggen zijn outliers en worden als aparte punten aangeduid. De uitersten van de whiskers duiden de laatste datapunten aan binnen deze grenzen.
        
```{r 2-8, cache=T, echo = F, fig.cap = "Verticale boxplot vertrekvertraging", fig.asp = 1, out.width = "70%", fig.width = 4, fig.align = "center"}
ggplot(data, aes(x="Afstand", y=afstand)) + 
  geom_boxplot() + 
  xlab("") +
  theme_minimal()
```

* Het is niet abnormaal dat er outliers in je data aanwezig zijn. 
* Bij normaal verdeelde data zal je gemiddeld 7 outliers per 1000 datapunten mogen verwachten. 
    * Een normale verdeling is een bepaalde manier waarop data waarden verdeeld kunnen zijn die in de realiteit vaak voorkomt.
* Indien je echter veel meer outliers ziet op je boxplot visualisatie, dan is de kans reëel dat er meer aan de hand is:
    * Er zijn bijvoorbeeld systematische meetfouten
    * De objecten in je data zijn in feite op bepaalde aspecten significant verschillend waardoor je ze apart zou moeten bestuderen.
* Je kan een boxplot ook roteren. (Fig \@ref(fig:2-9))
* Boxplots komen beter tot hun recht bij bivariate analyses dan bij univariate analyses.

```{r 2-9, cache=T, echo = F,fig.cap = "Horizontale boxplot vertrekvertraging", warning = F, fig.asp = 0.2}
ggplot(data, aes(x="Vertrekvertraging", y=vertrek_vertraging)) + 
  geom_boxplot() +
  xlab("") +
  coord_flip() +
  theme_minimal()
```

#### Violin plot

* Een violin plot kan je beschouwen als een combinatie van een histogram en een boxplot. (Fig. \@ref(fig:2_10a))
* Net als bij een boxplot wordt op verticale wijze getoond hoe de data verspreid is.
* Opnieuw kan je ervoor kiezen de grafiek te roteren. (Fig. \@ref(fig:2_10b))
* Net als bij een histogram kan je goed zien waar het volume (de massa) van de data zich bevindt.
* Net als bij een histogram kan je detecteren hoeveel modi de data bezit.
* In tegenstelling tot de boxplot, kan je bij een violinplot wel niet duidelijk zien waar bijvoorbeeld het 'midden' van je data is.
    
```{r 2-10a, cache=T, echo = F, fig.cap = "Verticale violin plot afstand", fig.asp = 1, out.width = "70%", fig.width = 4, fig.align = "center"}
ggplot(data, aes(x="Afstand", y=afstand)) + 
  geom_violin() + 
  xlab("") +
  theme_minimal()
```

```{r 2-10b, echo = F, fig.cap = "Horizontale violin plot vertrekvertraging", warning = F, cache = T, fig.asp = 0.2}
ggplot(data, aes(x="vertrek_vertraging", y=vertrek_vertraging)) + 
  geom_violin() + 
  xlab("") +
  coord_flip() +
  theme_minimal()
```

#### Jitter plot

* puntenwolk waarbij willekeurige "noise" (ruis) wordt toegevoegd. 
* de ruis zorgt ervoor dat datapunten niet overlappen, en dat het duidelijk is waar de massa zich bevindt.
* Fig. \@ref(fig:2-jitter) toont een vergelijking van violin, boxplot, point en jitter plot.

```{r 2-jitter, out.width = "24%", echo = F, warning = F, fig.show='hold', cache = T, fig.asp=2, fig.cap = "Violin, boxplot, point en jitter", fig.width = 2}
data_f <- sample_n(data, 500)
ggplot(data_f, aes(x="afstand", y=afstand)) + 
  geom_violin() + 
  xlab("") +
  theme_minimal(base_size = 20)
ggplot(data_f, aes(x="afstand", y=afstand)) + 
  geom_boxplot() + 
  xlab("") +
  theme_minimal(base_size = 20)
ggplot(data_f, aes(x="afstand", y=afstand)) + 
  geom_point() + 
  xlab("") +
  theme_minimal(base_size = 20)
ggplot(data_f, aes(x="afstand", y=afstand)) + 
  geom_jitter() + 
  xlab("") +
  theme_minimal(base_size = 20)
```


## Bivariate visualisatie (2 variabelen)


* Wanneer we de relatie tussen 2 variabelen bekijken is het eenvoudig te denken in _oorzaak_ en gevolg _termen._ ^[Zie opmerking i.v.m. correlatie versus causaliteit, \@ref(how-charts-lie).]
  * De variabele die we het label "oorzaak" geven, zullen we voortaan "onafhankelijke variabele" noemen.
  * De variabele die we het label "gevolg" geven, zullen we voortaan "afhankelijke variabele" noemen.
* Waar we eigenlijk in geïnteresseerd zijn bij een visualisatie van 2 variabelen is de impact van de onafhankelijke variabele op de afhankelijke variabele weer te geven.
* Alle vragen die we kunnen stellen bij de visualisatie van één variabele, kunnen we nog steeds stellen, met telkens de bijkomende vraag of het waargenomen patroon verandert als de onafhankelijke variabele van waarde verandert.

### Situatie 1: De onafhankelijke variabele is categorisch
Indien de afhankelijke variabele een continue variabele is kan je: 

* meerdere boxplots op 1 grafiek visualiseren, met telkens 1 boxplot per waarde van de onafhankelijke variabele. (Fig. \@ref(fig:2-12a))
  
```{r 2-12a, cache=T, echo = F, fig.cap = "Bivariate boxplot" }
ggplot(data, aes(x=luchthaven, y=afstand)) + 
  theme_minimal() +
  geom_boxplot()
```
* meerdere violinplots op 1 grafiek tonen, met telkens 1 violinplot per waarde van de onafhankelijke variabele. (Fig. \@ref(fig:2-12b))
 
```{r 2-12b, cache=T, echo = F, fig.cap = "Bivariate violin plot" }
ggplot(data, aes(x=luchthaven, y=afstand)) + 
  theme_minimal() +
  geom_violin()
```
* meerdere histogrammen op 1 grafiek tonen 
  * Hiervoor gebruiken we facetten: we tekenen voor elke waarde van de onafhankelijke variabele een apart assenstelsel. (Fig. \@ref(fig:2-12c))

```{r 2-12c, cache=T, echo = F, fig.cap = "Bivariate histogram plot" }
ggplot(data, aes(x=afstand)) + 
  theme_minimal() +
  geom_histogram(binwidth = 250, fill = "lightgrey") +
  facet_grid(~luchthaven) 
  
```
* meerdere density plots
 * Hiervoor kunnen we facetten gebruiken, ofwel de density plots over elkaar tekenen en onderscheiden met kleur. (Fig. \@ref(fig:2-12d)-\@ref(fig:2-12e))
   
 
```{r 2-12d, cache=T, echo = F, fig.cap = "Bivariate density plot - apart" }
ggplot(data, aes(x=afstand)) + 
  theme_minimal() +
  geom_density() +
  facet_grid(~luchthaven) 
```

```{r 2-12e, cache=T, echo = F, fig.cap = "Bivariate density plot - overlappend", fig.show="hold", fig.height=5}
ggplot(data, aes(x=afstand, fill = luchthaven)) + 
  theme_minimal() +
  scale_fill_economist() +
  geom_density(alpha = 0.5) +
  theme(legend.position = "bottom")
ggplot(data, aes(x=afstand, color = luchthaven)) + 
  theme_minimal() +
  scale_color_economist() +
  geom_density()  +
  theme(legend.position = "bottom")

```


Indien de afhankelijke variabele een **categorische variabele** is:

 * Kan je meerdere barplots op 1 grafiek visualiseren, met telkens de bars gegroepeerd per waarde van de onafhankelijke variabele.
  
      
      
```{r 2-13a, cache=T, echo = F, fig.cap = "Bivariate barplot" }
data_f <- data %>%
  group_by(maatschappij) %>%
  mutate(n = n()) %>%
  ungroup() %>%
  filter(n > 0.25*mean(n))
ggplot(data_f, aes(x=luchthaven, fill=fct_infreq(maatschappij))) + 
  geom_bar(position="dodge") +  
  theme_minimal() +
  scale_fill_economist()
```

 * Kan je meerdere stacked barplots op 1 grafiek plaatsen, met telkens een volledige stack per waarde van de onafhankelijke variabele.

```{r 2-13b, cache=T, echo = F, fig.cap = "Bivariate stacked barplot" }
ggplot(data_f, aes(x=luchthaven, fill=fct_infreq(maatschappij))) + 
  geom_bar(position="fill") +  
  theme_minimal() +
  scale_fill_economist()

```

* Kan je een heatmap (of tile plot) gebruiken. Hier bij plaats je 2 categorische variabelen op de x-as en y-as, respectivelijk. 
  * Voor elke combinatie van waarden is er een tegel die je kan inkleuren volgens de frequentie van de combinatie. 
  
```{r echo = F}
data_f %>%
  count(maatschappij, luchthaven) %>%
  ggplot(aes(luchthaven, maatschappij)) +
  geom_tile(aes(fill = n)) +
  scale_fill_continuous_tableau() +
  theme_minimal()
```

* Je kan bijkomende ook de exacte waarde in elke tegel plotten.

```{r, echo = F}
data_f %>%
  count(maatschappij, luchthaven) %>%
  ggplot(aes(luchthaven, maatschappij)) +
  geom_tile(aes(fill = n)) +
  scale_fill_continuous_tableau() +
  geom_text(aes(label = n)) +
  theme_minimal()
```

__Let op__ wanneer beide variabelen categorisch zijn, is het nog steeds van belang welke je beschouwd als afhankelijke en welke als onafhankelijke. Technisch kan je ze omdraaien, maar de betekenis van je visualizatie is niet dezelfde!

```{r echo = F, cache = T, fig.cap = "Twee verschillende stacked barcharts van luchthaven en maatschappij.", fig.show = "hold"}
ggplot(data_f, aes(x=luchthaven, fill=fct_infreq(maatschappij))) + 
  geom_bar(position="fill") +  
  theme_minimal() +
  scale_fill_economist()
ggplot(data_f, aes(x=maatschappij, fill=fct_infreq(luchthaven))) + 
  geom_bar(position="fill") +  
  theme_minimal() +
  scale_fill_economist() +
    coord_flip()
```

Andere mogelijkheden:

- treemap (Fig. \@ref(fig:treemap))

```{r treemap, echo = F, cache = T, fig.cap = "Treemap luchthaven en maatschappij.", fig.show = "hold", warning = F}
data_f %>% count(luchthaven, maatschappij) %>% mutate(rel_n = row_number(n)) %>% ggplot(aes(area = n, subgroup = luchthaven)) + geom_treemap(aes(fill = luchthaven, alpha = rel_n)) + geom_treemap_text(aes(label = maatschappij), color = "white") + geom_treemap_subgroup_border(color = "white") + scale_fill_economist(guide = F) + scale_alpha_continuous(range = c(0.1,1), guide = F) + geom_treemap_subgroup_text(aes(label = luchthaven), color = "white")
```

- mosaic plot (Fig. \@ref(fig:mosaic))


```{r mosaic, echo = F, cache = T, fig.cap = "Mosaic plot luchthaven en maatschappij.", fig.show = "hold"}
data_f %>%
    ggplot() +
    geom_mosaic(aes(x = product(maatschappij, luchthaven), fill = maatschappij)) +
    scale_fill_economist() +  
   theme_minimal()
```


### Situatie 2: De onafhankelijke variabele is continue


__In dit geval kan je geen aparte plot per mogelijke waarde van de onafhankelijke variabele maken omdat er mogelijk oneindig veel waarden zijn.__

Indien de afhankelijke variabele continu is, dan kan je een scatterplot maken.

 * Iedere observatie is een punt in je grafiek, waarbij de x-waarde op de grafiek overeenkomt met de waarde van de onafhankelijke variabele en de y-waarde op de grafiek overeenkomt met de waarde van de afhankelijke variabele.
    

```{r 213c, cache=TRUE, echo = F, fig.cap = "Scatterplot", warning = F}
data %>%
    sample_n(1000) %>% 
    ggplot(aes(x=afstand, y=vliegtijd)) + 
  geom_point() +
  theme_minimal()
```

 * Om patronen beter te herkennen kan je een "trend-lijn" toevoegen.

```{r 2-13d, cache=TRUE, echo = F, fig.cap = "Scatterplot met trendlijn", warning = F, message = F}
data %>%
    sample_n(1000) %>% 
ggplot(aes(x=afstand, y=vliegtijd)) + 
  geom_point() +
  theme_minimal() +
  geom_smooth(se = F)
```
 

* Bij scatterplots is er gevaar voor overplotting
* Mogelijke oplossingen
    * 2D histogram: verdeel veld op in vierkante bins en tel per bin hoeveel data punten er zijn
    * Hexplot: analoog, maar gebruik zeshoekige bins ipv vierkanten. Voordeel: punten binnen elke zeshoek liggen dichter bij het middelpunt van de bin.

```{r cache=TRUE, echo = F, fig.cap = "Scatterplot met trendlijn", warning = F}
data %>%
    sample_n(1000) %>% 
    ggplot(aes(x=afstand, y=vliegtijd)) + 
  geom_bin2d() +
  theme_minimal() +
    scale_fill_continuous_tableau()
```




```{r cache=TRUE, echo = F, fig.cap = "Hexplot met trendlijn", warning = F}
data %>%
    sample_n(1000) %>% 
    ggplot(aes(x=afstand, y=vliegtijd)) + 
  geom_hex() +
  theme_minimal() +
    scale_fill_continuous_tableau()
```

Indien de afhankelijke variabele categorisch is, dan kan je niet rechtstreeks een betekenisvolle plot maken omdat er waarschijnlijk te weinig datapunten zijn voor iedere mogelijke waarde van de onafhankelijke variabele.

* Wat je dan best kan doen, is de onafhankelijke continue variabele categorisch maken door deze in te delen in bins/intervallen. En dan ben je terug in de situatie waarbij de onafhankelijke variabele categorisch is. We komen hierop terug in het hoofdstuk over Data Voorbereiding.

### Situatie 3: De onafhankelijke variabele is tijd


- Tijd kunnen we zien als continue variabele
    - Bijgevolg zelfde grafieken mogelijk als wanneer onafhankelijke variabele continue is
        - Tijd + continue afhankelijk -> scatterplot, 2D histograms, hex bins
        - Tijd + categorisch afhankelijk -> probleem: tijd categoriseren (zie verder).
        
- Wanneer we één enkele variabele voorstellen doorheen de tijd is er per tijdseenheid maar 1 data punt. Hieronder wordt de gemiddelde vertrekvertraging per dag getoond.  
```{r, echo =F, fig.cap = "Puntenwolk met tijd op x-as"}
data %>% 
    mutate(date = date(datum)) %>%
    group_by(date) %>%
    summarize(gemiddelde_vertrekvertraging = mean(vertrek_vertraging, na.rm = T)) %>%
    ggplot(aes(date, gemiddelde_vertrekvertraging)) +
    geom_point() + 
    theme_minimal()
```

In dat geval is het beter om in plaats van punten een lijngrafiek te gebruiken. 

```{r echo = F, fig.cap = "Lijngrafiek"}
data %>% 
    mutate(date = date(datum)) %>%
    group_by(date) %>%
    summarize(gemiddelde_vertrekvertraging = mean(vertrek_vertraging, na.rm = T)) %>%
    ggplot(aes(date, gemiddelde_vertrekvertraging)) +
    geom_line() + 
    theme_minimal()
```

Indien je een beperkt aantal punten hebt (hieronder bijvoorbeeld één maand van de vluchtgegevens) kan je ervoor kiezen om zowel punten als lijnen te tonen. Op die manier is het makkelijker individuele data punten af te lezen. 

```{r echo = F, fig.cap = "Lijn grafiek met punten"}
data %>% 
    mutate(date = date(datum)) %>%
    filter(month(date) == 1) %>%
    group_by(date) %>%
    summarize(gemiddelde_vertrekvertraging = mean(vertrek_vertraging, na.rm = T)) %>%
    ggplot(aes(date, gemiddelde_vertrekvertraging)) +
    geom_line() +
    geom_point() + 
    theme_minimal()
```

Indien we veel datapunten hebben, wat hier het geval is, kan een lijngrafiek zeer chaotisch worden. We kunnen daarom ervoor kiezen om onze tijd in te delen in categoriëen. Bijvoorbeeld, in plaats van de dagelijkse gemiddelde vertrekvertraging, kunnen we de gemiddelde vertrekvertraging per maand berekenen en tonen. 

```{r echo = F, fig.cap =  "Lijngrafiek van gemiddelde vertrekvertraging per maand."}
data %>% 
    mutate(month = month(datum, label = T)) %>%
    group_by(month) %>%
    summarize(gemiddelde_vertrekvertraging = mean(vertrek_vertraging, na.rm = T)) %>%
    ggplot(aes(month, gemiddelde_vertrekvertraging, group = NA)) +
    geom_line() +
    geom_point() + 
    theme_minimal()
```

- Op dit moment verliezen we daardoor wel veel informatie. Maar we kunnen dit nu ook beschouwen als een visualizatie van een categorische variabele (maand) t.o.v. een continue. Waardoor we de technieken voor dit type bivariate visualizaties kunnen toepassen. Bijvoorbeeld boxplots. We zien nu zowel de algemene trend als outliers. In februari was er bijvoorbeeld een dag waar de gemiddelde vertraging ver boven de normale trend lag.  

```{r echo = F, fig.cap= "Boxplots van gemiddelde dagelijske vertrekvertraging voor elke maand."}
data %>% 
    mutate(date = date(datum)) %>%
    mutate(month = month(datum, label = T)) %>%
    group_by(date, month) %>%
    summarize(gemiddelde_vertrekvertraging = mean(vertrek_vertraging, na.rm = T)) %>%
    ggplot(aes(month, gemiddelde_vertrekvertraging)) +
    geom_boxplot() + 
    theme_minimal()
```

- Wanneer we de tijd gecategoriseerd hebben kunnen we ook categorische variabelen weergeven als afhankelijke. Bijvoorbeeld, zijn er verschillen in het aantal vluchten per maatschappij doorheen de tijd. We kunnen hier dezelfde types grafieken als voor bivariate cat+cat visualizaties gebruiken, bijvoorbeeld stacked barcharts. 

```{r echo = F, fig.cap = "Verdeling van aantal vluchten over maatschappijen per maand."}
data_f %>% 
    mutate(month = month(datum, label = T)) %>%
    count(month, maatschappij) %>%
    group_by(month) %>%
    mutate(n = n/sum(n)) %>%
    ggplot(aes(month, n, fill = maatschappij)) +
    geom_col() + 
    theme_minimal() +
    scale_fill_economist()
```

- We kunnen categorizeren op maand, jaar, etc. Maar ook op tijdspecifiekere kenmerken, zoals bijvoorbeeld de dag van de week

```{r echo = F, fig.cap = "Verdeling van aantal vluchten over maatschappijen per dag van de week."}
data_f %>% 
    mutate(dayofweek = wday(datum, label = T)) %>%
    count(dayofweek, maatschappij) %>%
    group_by(dayofweek) %>%
    mutate(n = n/sum(n)) %>%
    ggplot(aes(dayofweek, n, fill = maatschappij)) +
    geom_col() + 
    theme_minimal() +
    scale_fill_economist()
```

- Of het uur van de dag

```{r echo = F, fig.cap = "Verdeling van aantal vluchten over maatschappijen per vertrekuur."}
data_f %>% 
    mutate(hourofday = hour(datum)) %>%
    count(hourofday, maatschappij) %>%
    group_by(hourofday) %>%
    mutate(n = n/sum(n)) %>%
    ggplot(aes(hourofday, n, fill = maatschappij)) +
    geom_col() + 
    theme_minimal() +
    scale_fill_economist()
```




  
  
## Multivariate visualisaties (meer dan 2 variabelen)
* Datavisualisatie van patronen tussen meer dan 2 variabelen worden snel te complex om te interpreteren.
* Het basisprincipe is wel eenvoudig. 
    * Je hebt typisch 1 afhankelijke variabele (Y) en een aantal onafhankelijke variabelen (A, B, ...).
    * Je visualizeert eerst Y en A (bivariaat)
    * Je voegt dan de volgende variabelen (B, c, ...) stap voor stap toe aan de grafiek.
      * Door de bivariate grafiek te herhalen in verschillende facetten (een voor elke waarde van B).
      * Door verschillende kleuren te gebruiken voor elke waarde van B
* Bij multivariate visualisaties zijn er afhankelijk van de data types oneidig veel mogelijke grafieken die je kan maken. 
    * Het is vaak afhankelijk van de data welke grafiek het "best past"
    * Enkel wanneer de onafhankelijk variabele continu is zijn de keuzes beperkt en ben je vaak genoodzaakt om deze om te zetten naar categoriëen.

### Voorbeeld: In welke mate hangt de vertrek vertraging af van de luchthaven en de afstand?  

Stap 1. Vertraging vs. afstand

* Beide continue: scatterplot

```{r labelke, echo = F, cache = T, fig.cap = "Vertrekvertraging vs afstand", warning = F, dev = "png"}
ggplot(data, aes(x = afstand, y = vertrek_vertraging)) +
  geom_point() +
  theme_minimal() +
    coord_cartesian()
```

Stap 2. Voeg invloed van luchthaven toe.

* Optie 1: gebruik kleur om de verschillende luchthavens te differenteren. Een trendlijn kan hier helpen.

```{r labelke2, echo = F, cache = T, fig.cap = "Vertrekvertraging vs afstand en luchthaven", warning = F, message =F, dev = "png"}
data %>%
    sample_n(1000) %>% 
    ggplot(aes(x = afstand, y = vertrek_vertraging, color = luchthaven)) +
  geom_point() +
  theme_minimal() +
  geom_smooth(se = F)+
    coord_cartesian()
```
* Geen geweldig resultaat in dit geval. 

* Optie 2: Gebruik facetten voor de verschillende luchthavens.

```{r echo = F, cache = T, fig.cap = "Vertrekvertraging vs afstand en luchthaven", warning = F, message = F, fig.fullwidth = T, fig.width = 9}
data %>%
    sample_n(1000) %>% 
ggplot(aes(x = afstand, y = vertrek_vertraging)) +
  geom_point() +
  theme_minimal() +
  geom_smooth(se = F) +
  facet_grid(~luchthaven)
```

* Optie 3: Facets, maar gebruik hex bins

```{r echo = F, cache = T, fig.cap = "Vertrekvertraging vs afstand en luchthaven, hexbins", warning = F, fig.fullwidth = T, fig.width = 9}
data %>%
    sample_n(1000) %>% 
ggplot(aes(x = afstand, y = vertrek_vertraging)) +
  geom_hex() +
  theme_minimal() +
  facet_grid(~luchthaven) +
    scale_fill_continuous_tableau()
```

### Voorbeeld: multivariaat tijd

#### Situatie 1: Variabelen hebben dezelfde eenheid. 

Voorbeeld: vertrekvertraging en aankomstvertraging. Je kan lijngrafieken tekenen met meerdere lijnen op hetzelfde assenstelsel. 

```{r echo = F, fig.cap = "Evolutie van 2 variabelen over tijd in één grafiek (zelfde meeteenheid)"}
data %>%
    select(datum, vertrek_vertraging, aankomst_vertraging) %>%
    mutate(date = date(datum)) %>%
    filter(month(datum) == 1) %>%
    tidyr::gather(key, value, vertrek_vertraging, aankomst_vertraging) %>%
    group_by(date, key) %>%
    summarize(value = mean(value, na.rm = T)) %>%
    ggplot(aes(date, value, color = key)) + 
    geom_line() +
    geom_point() +
    theme_minimal() + 
    scale_color_economist()
```

- Of je kan er voor kiezen elke lijn in een afzonderlijk paneel te tonen

```{r echo = F, fig.cap = "Evolutie van 2 variabelen over tijd in afzondelijke panels."}
data %>%
    select(datum, vertrek_vertraging, aankomst_vertraging) %>%
    mutate(date = date(datum)) %>%
    filter(month(datum) == 1) %>%
    tidyr::gather(key, value, vertrek_vertraging, aankomst_vertraging) %>%
    group_by(date, key) %>%
    summarize(value = mean(value, na.rm = T)) %>%
    ggplot(aes(date, value)) + 
    geom_line() +
    geom_point() +
    theme_minimal() + 
    scale_color_economist() +
    facet_grid(key~.)
```

#### Situatie 2: Variabelen hebben niet dezelfde eenheid

Voorbeeld: de gemiddelde levensverwachting en gdp per capita doorheen de tijd. In dit geval ben je genoodzaakt 2 panelen te gebruiken. 

```{r echo = F, fig.cap = "Evolutie van 2 variabelen met andere eenheden in afzonderlijke panels."}
library(gapminder) 
gapminder %>%
    select(year, lifeExp, gdpPercap) %>%
    tidyr::gather(key, value, -year) %>%
    group_by(year, key) %>%
    summarize(value = mean(value)) %>%
    ggplot(aes(year, value)) +
    geom_line() +
    facet_grid(key ~ ., scales = "free") +
    theme_minimal()
```

Optie 2: Maak een connected scatterplot. Toon een punt voor elke meting, waarbij x en y elk een variabele voorstellen. Verbindt dat elk punt in chronologische volgorde. 

```{r echo = F, fig.cap = "Evolutie van 2 variabelen (levensverwachting en inkomen per capita) aan de hand van connected scatterplot."}
gapminder %>%
    select(year, lifeExp, gdpPercap) %>%
    tidyr::gather(key, value, -year) %>%
    group_by(year, key) %>%
    summarize(value = mean(value)) %>%
    tidyr::spread(key, value) %>%
    ggplot(aes(gdpPercap, lifeExp)) +
    geom_path() +
    theme_minimal() +
    geom_text(aes(label = year))
```

Variant, per continent: 

```{r echo = F, fig.cap = "Evolutie van 2 variabelen aan de hand van connected scatterplot - verschillende groepen."}
gapminder %>%
    select(year, continent, lifeExp, gdpPercap) %>%
    tidyr::gather(key, value, -continent, -year) %>%
    group_by(year, key, continent) %>%
    summarize(value = mean(value)) %>%
    tidyr::spread(key, value) %>%
    ggplot(aes(gdpPercap, lifeExp, color = continent)) +
    geom_path() +
    theme_minimal() +
    geom_text(aes(label = year), data = function(d) filter(d, year %% 2 == 0)) +
    scale_color_colorblind()
```

## Visualisaties voor communicatie

Wanneer uiteindelijk beslist om een visualizatie te gebruiken om te communiceren, zorg ervoor dat

* de grafiek leesbaar is
* je kleur enkel gebruikt waar nodig.
* je correcte as-labels gebruikt
* je geen theme gebruikt dat te druk/overheersend is
* je een gepaste titel voorziet. 

### Voorbeeld: voor ~ goed voor exploratie

```{r echo = F}
data_f %>%
    ggplot(aes(fct_infreq(maatschappij), fill = fct_infreq(luchthaven))) +
    facet_grid(~luchthaven) +
    geom_bar()
```

### Voorbeeld: na ~ goed voor communicatie

```{r echo = F}
data_f %>%
    ggplot(aes(fct_infreq(maatschappij))) +
    facet_grid(~luchthaven) +
    geom_bar(fill = "lightgrey") +
    coord_flip() +
    theme_minimal() +
    labs(x = "Maatschappij", y = "Aantal vluchten", title = "Meest actieve maatschappijen per luchthaven.")   +
    scale_y_continuous(breaks = seq(0, 1000000, by = 15000))
```

Merk op: ver van alle grafieken getoond in dit hoofdstuk zijn goed voor communicatie zonder aanpassingen.

## How charts lie

### Causaliteit vs correlatie

* Van zodra er twee (or meer) variabelen zijn, gaan we op zoek naar patronen in relaties tussen de variabelen.
* Het is belangrijk en essentieel te beseffen dat mensen een automatische reflex hebben om te denken in termen van oorzaak-gevolg als we kijken naar relaties tussen twee variabelen.
    * Het is echter niet omdat er een duidelijke relatie bestaat tussen twee variabelen (correlatie), dat hier sprake is van een oorzaak-gevolg verband (causaliteit).
    * Bijvoorbeeld: Indien in de zomer de verkoop van paraplu's sterk stijgt, dan zal de graanopbrengst in het najaar dalen. Dit betekent niet dat de verkoop van paraplu's een impact heeft op de graanopbrengst. Wat hier waarschijnlijk gebeurt, is dat door hevige regenval in de zomermaanden, de verkoop van paraplu's is toegenomen en de graanoogst tegenvalt.
        * Soms is het intuïtief zeer onwaarschijnlijk dat de waargenomen correlatie causaliteit impliceert. Kijk hiervoor maar eens naar de voorbeelden op http://www.tylervigen.com/spurious-correlations
        * Wanneer het echter plausibel is dat de waargenomen correlatie causaliteit voorstelt, is het belangrijk dat we tegen onze natuurlijke reflex in gaan en niet in termen van oorzaak-gevolg denken. 
        * Het aantonen van causaliteit is nooit mogelijk met descriptieve en exploratieve data analyse!

## Referenties

* [Information is Beautiful](https://informationisbeautiful.net/)
* [Fundamentals of Data Vizualization](https://serialmentor.com/dataviz/)
* [R Graph Gallery](https://www.r-graph-gallery.com/)
* [Data to viz](https://www.data-to-viz.com/)
* [Spurrious correlations](https://www.tylervigen.com/spurious-correlations)
* [Misleading election map](https://edition.cnn.com/2020/01/17/politics/donald-trump-2016-map-county-by-county/index.html)
