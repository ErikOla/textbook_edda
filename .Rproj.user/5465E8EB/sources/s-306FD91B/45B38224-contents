
# [Tutorial] Tidy data


```{r include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = F, cache = T)
library(tufte)
library(pander)
source("prepare_session.R")
knitr::opts_chunk$set(out.width = "100%",
                      fig.width = 6, fig.asp = 0.6, tidy='styler',
                      cache = T,
                      echo = T,
                      warning = F)
```


```{r echo = F, include = F}
library(dplyr)
library(forcats)

```
## Voor je begint

Tijdens deze tutorial zullen we verschillende r-pakketten gebruiken. Zorg ervoor dat je ze installeert, indien nodig, en laadt.

```{r}
library(dplyr)
library(tidyr)
library(stringr)
```

Onze oude vriend dplyr zal ons voorzien van enkele functies om verschillende datasets te combineren tot één. We zullen tidyr gebruiken om datasets te transformeren, en stringr om enkele manipulaties van tekstvariabelen te doen. 

```{r echo = F}
library(gapminder)
set.seed(123)
countries_population <- gapminder %>% filter(year == 2007) %>% select(country, pop) %>% sample_frac(0.8)
countries_lifeExp <- gapminder %>% filter(year == 2007) %>% select(country, lifeExp) %>% sample_frac(0.6)

population_europe <- gapminder %>% filter(continent == "Europe", year == 2007) %>% select(country, pop)
population_africa<- gapminder %>% filter(continent == "Africa", year == 2007) %>% select(country, pop)
```




Deze handleiding bestaat uit twee grote delen:

1.	Samenvoegen van datasets
2. 	Datasets transformeren

Daarna, in een extra deel, zullen we een case study als voorbeeld doornemen. 


## Disclaimer {-}

Er worden veel datasets gebruikt in deze handleiding. Een loadscript is voorzien om alle datasets voor je aan te maken. Voer het script uit en je kan aan de slag/


Laten we beginnen!

## Data samenvoegen

We kunnen verschillende datasets samenvoegen door __joining__ of __binding__.

* We __joinen__ verschillende datasets die verschillende informatie bevatten over dezelfde waarnemingen. Zo kunnen we bijvoorbeeld 1) een dataset hebben van landen met hun bevolking en 2) een dataset van landen met hun levensverwachting. Deze kunnen we _joinen_.

```{r}
countries_population
countries_lifeExp
```


*	We __binden__ verschillende datasets die dezelfde informatie bevatten op verschillende waarnemingen. Zo kunnen wij bijvoorbeeld beschikken over 1) een dataset van Europese landen met hun bevolking en 2) een dataset van Afrikaanse landen met hun bevolking. We kunnen deze twee aan elkaar _binden_.  [^binding]

```{r}
population_africa
population_europe
```


[^binding]:  Er zijn eigenlijk nog meer gevallen waarin we datasets aan elkaar kunnen binden, maar daar hoeft u zich nu niet druk over te maken. Even ter herinnering: bind verschillende waarnemingen, voeg verschillende informatie samen.

Laten we eens kijken hoe we gegevens kunnen samenvoegen.

### Joining data

Vergeet niet dat we datasets samenvoegen als ze verschillende informatie over dezelfde waarnemingen bevatten. Dit betekent dat er een manier moet zijn om de datasets te _linken_. Deze koppelingen noemen we _ids_ of _keys_. 

Als we bevolkings- en levensverwachtingsgegevens over landen hebben, dan is de naam, code of afkorting van het land onze key om beide datasets te koppelen. 

Merk op dat, wanneer beide datasets verschillende sleutels gebruiken, bijvoorbeeld de ene gebruikt de naam (België) en de andere de code (BE), we ze niet kunnen samenvoegen. In dat geval zouden wij een van de variabelen moeten hercoderen of een andere dataset moeten vinden die als intermediaire link kan dienen (d.w.z. een die zowel de namen als de codes bevat. Er bestaan veel verschillende landencodes, dus dit is een veel voorkomend probleem. Maar in ons geval kunnen we aan de slag)

De join functies die we zo zullen introduceren zullen altijd zoeken naar variabelen met dezelfde namen in beide tabellen en deze gebruiken als de sleutels om ze te koppelen. Je kunt de sleutels expliciet instellen met het by argument. Dit is vooral nuttig indien 

a) De sleutels in beide datasets een verschillende naam hebben. Bijvoorbeeld country vs ctry
b) Niet alle gemeenschappelijke variabelen ook daadwerkelijk sleutels zijn. 

Voorlopig zullen we de sleutels altijd laten kiezen door de functies. Een bericht zal ons vertellen welke sleutels ze hebben gebruikt. 

Er zijn 4 manieren om datasets samen te voegen.

* inner_join
* left_join
* right_join
* full_join


Waarom vier? Wel, als we twee datasets willen samenvoegen, gebeurt het meestal dat ze informatie bevatten over niet _exact_ dezelfde waarnemingen. Kijk maar eens naar de gegevens over de bevolking en de levensverwachting. De eerste bevat informatie over `r nrow(countries_population)` landen en de tweede bevat informatie over `r nrow(countries_lifeExp)` landen. Ze kunnen dus onmogelijk informatie bevatten over dezelfde set van landen. De verschillende joins zullen dit probleem verschillend aanpakken. 

### Inner join 

Inner join betekent: Ik bewaar alleen informatie over keys die in beide tabellen voorkomen. Dus, als ik de bevolking van land A niet heb, wil ik ook de levensverwachting niet hebben. 

```{r}
inner_join(countries_population, countries_lifeExp)
```

Deze join geeft ons `r nrow(inner_join(countries_population, countries_lifeExp))` waarnemingen, dat is de deelverzameling van landen waarover we beide soorten informatie hebben. Merk ook op hoe de `inner_join` je vertelt welke key  het heeft gebruikt. 

### Left join

Left join betekent: Ik bewaar alle informatie in mijn eerste (linker) tabel. Dus, zelfs als ik de levensverwachting niet heb, geef me nog steeds de bevolking. Het ontbrekende deel van de nieuwe waarneming (d.w.z. de levensverwachting), is nu NA. 


```{r}
left_join(countries_population, countries_lifeExp)
```

Deze join geeft ons `r nrow(left_join(countries_population, countries_lifeExp))` waarnemingen, dat is het aantal landen waarvoor we informatie hebben over de bevolking. Merk ook op hoe het NA's invoegt voor de lifeExp variabele. 

```{r}
left_join(countries_population, countries_lifeExp) %>%
	summary()
```

### Right join

Right join betekent: het tegenovergestelde van left join. Ik bewaar alle informatie in mijn tweede (rechter) tabel.

```{r}
right_join(countries_population, countries_lifeExp)
```

Deze join geeft ons `r nrow(right_join(countries_population, countries_lifeExp))` waarnemingen, dat is het aantal landen waarvoor we informatie hebben over de levensverwachting. 

### Full join

Full join betekent: Ik wil alle informatie behouden die ik heb. Dus ook populaties voor landen zonder levensverwachting en vice versa blijven in de dataset. Alle ontbrekende informatie wordt ingevuld als NA.

```{r}
full_join(countries_population, countries_lifeExp)
```

Deze join geeft ons `r nrow(full_join(countries_population, countries_lifeExp))` waarnemingen, dat is het totale aantal landen waarvoor we minstens één stukje informatie hebben. 

Een schematisch overzicht van de vier typen is hieronder te zien. De gekleurde getallen stellen de sleutels voor (landen in ons voorbeeld), terwijl de x- en y-waarden de waarden voorstellen (bevolking en levensverwachting in ons voorbeeld). Natuurlijk kunnen er zoveel waarden zijn als mogelijk in elke tabel, het hoeft er niet maar één te zijn. We zullen snel genoeg andere voorbeelden zien.


```{r echo = F, fig.width=10}
knitr::include_graphics("images/join_types.PNG", dpi = NA)
```

### Duplicates

Soms bevatten één of beide datasets dubbele keys: stel, we hebben informatie over de bevolking in elk land voor meer dan één jaar, zodat wij voor elk land meer dan één waarneming hebben. In dergelijke gevallen zal elke waarneming meerdere malen worden samengevoegd, zoals in de onderstaande figuur. [^duplicates]

```{r echo = F, fig.width=10}
knitr::include_graphics("images/join_duplicates.PNG", dpi = NA)
```


[^duplicates]: Als we zowel bevolkingsgegevens over meerdere jaren als gegevens over de levensverwachting over meerdere jaren hebben, moeten we natuurlijk gewoon het _jaar_ als key opnemen. We willen niet dat ze door elkaar lopen. In dat geval wordt elke waarneming gedefinieerd door zowel land als jaar.  

### Een voorbeeld

Het pakket nycflights13 bevat verschillende datasets over vluchten vanuit NYC in 2013, known from the lecture notes. 

```{r}
library(nycflights13)
```

Een van de datasets heet flights

```{r}
flights %>%
	glimpse()
```

Een andere heet airlines, met meer informatie over de luchtvaartmaatschappijen. 

```{r}
airlines %>%
	glimpse()
```

Je kan zien dat ze de variabele "carrier" gemeen hebben, die voor elke luchtvaartmaatschappij een code bevat. We kunnen de naam van de luchtvaartmaatschappij dus toevoegen aan de vluchten

```{r}
flights %>%
	inner_join(airlines)
```

Merk op dat we een inner join hebben gedaan en dat het aantal vluchten niet is afgenomen. Dit betekent dat elke luchtvaartmaatschappij in vluchten ook beschikbaar is in luchtvaartmaatschappijen. Met andere woorden, voor alle luchtvaartmaatschappijen waarvan we vluchten hebben gezien, kennen we de naam van de luchtvaartmaatschappij.


Voor een meer geavanceerd voorbeeld, laten we eens kijken naar de dataset weather.

```{r}
weather %>%
	glimpse
```

Het bevat informatie over plaats en tijd: dezelfde die we ook hebben voor vluchten, en het bevat verschillende variabelen over het weer (wind, temperatuur, neerslag, enz.)

Laten we de vluchtgegevens samenvoegen met het weer.

```{r}
flights %>%
	inner_join(airlines) %>%
	inner_join(weather) -> flights

flights %>%
	glimpse
```


Merk op dat de tweede join de variabelen jaar, maand, oorsprong, uur en time_hour gebruikte om het weer van de juiste plaats (vertrekplaats, meer specifiek) en tijd bij elke vlucht te voegen. 


### Binding data

De gegevens die we hierboven hebben samengevoegd waren steeds verschillende stukken informatie die we op de een of andere manier aan elkaar hebben gekoppeld (zelfde land, zelfde tijd, zelfde plaats, zelfde luchtvaartmaatschappij, enz.) Soms hebben we datasets over afzonderlijke objecten die niet aan elkaar gekoppeld zijn, maar wel dezelfde informatie bevatten. Denk aan de datasets over Afrikaanse en Europese landen.

```{r}
population_africa
population_europe
```

Deze waarnemingen zijn niet aan elkaar gekoppeld (er is geen verband tussen een Afrikaans land en een Europees land), maar ze bevatten wel dezelfde gegevens (nl. bevolking).

We kunnen deze __rijen__ aan elkaar __binden__.

```{r}
bind_rows(population_africa, population_europe)
```

Merk op dat we `r nrow(population_africa)` Afrikaanse landen hadden en `r nrow(population_europe)` Europese landen. Samen maakt dit `r nrow(bind_rows(population_africa, population_europe))` landen.


Voor bind_row is het niet noodzakelijk om precies dezelfde informatie te hebben in beide datasets. Stel dat we de levensverwachting hebben voor Afrikaanse landen, maar niet voor Europese. Beschouw de dataset `information_africa`.


```{r echo = F}
information_africa <- gapminder %>% filter(continent == "Africa", year == 2007) %>% select(country, pop, lifeExp)
```

```{r}
information_africa 
```

En we binden deze twee datasets.


```{r}
bind_rows(information_africa, population_europe) %>%
	summary
```

Wat we hadden kunnen verwachten is inderdaad gebeurd: de 30 Europese landen kregen een NA voor levensverwachting. Wees echter op je hoede: als beide datasets verschillende informatie hebben, is bind_rows misschien niet wat je zoekt, en heb je misschien een join nodig? Zorg ervoor dat je begrijpt hoe je datasets zich tot elkaar verhouden en hoe je ze moet combineren. 

Dat gezegd zijnde, nog een opmerking over het samenvoegen van gegevens. Als er een bind_rows is, moet er toch ook een bind_cols zijn om kolommen te binden? Ja, die is er. We zullen deze functie echter niet gebruiken (hoera!). bind_cols kan doen wat het zegt: kolommen samenbinden net zoals bind_rows rijen samenbindt. Maar kolommen samenbinden betekent dat we 2 sets informatie hebben over dezelfde waarnemingen? Dat klinkt erg alsof er een join voor nodig is, nietwaar? Inderdaad! Het belangrijkste verschil tussen bind_rows en joins is dat joins rijen zullen combineren die dezelfde key hebben. Echter, bind_rows zal rijen combineren op positie, d.w.z. de eerste rij van dataset A zal gecombineerd worden met de eerste rij van dataset B. Er wordt niet gekeken naar keys. Dus als dataset A en B in een verschillende volgorde staan, heb je je data verknoeid. Dus, vergeet gewoon bind_cols. Bind_rows en joins moeten in staat zijn om je te brengen waar je wilt zijn. 

## Transforming data

Naast het samenvoegen van gegevens, zullen we ook leren hoe we gegevens kunnen transformeren. Het verschil? Voor het samenvoegen hebben we twee datasets nodig, voor het transformeren zullen we slechts één dataset gebruiken. 

Het belangrijkste doel van het transformeren van onze gegevens is ervoor te zorgen dat ze _tidy_ zijn. Dit betekent: elke rij is een observatie, en elke kolom is een variabele.

```{r echo = F, fig.width = 10}
knitr::include_graphics("images/tidydata.png", dpi = NA)
```

Tidying data is vooral belangrijk in de beginfase van uw project, zoals blijkt uit de onderstaande figuur. Het kan echter ook nuttig zijn tijdens analyses. Voor sommige grafieken kan het gebeuren dat je je gegevens moet transformeren - veranderen wat je waarnemingen zijn. Dit maakt data transformatie zowel essentieel als moeilijk. Het is zeer belangrijk te begrijpen wat de huidige vorm van je gegevens is, en in welke vorm je ze nodig hebt voor je analyse. Dit vergt oefening en tijd. 

```{r echo = F, fig.width = 10}
knitr::include_graphics("images/tidyverse.JPG", dpi = NA)
```

We zullen vier verschillende transformaties bespreken [^name].

[^name]: Merk op dat wij de term _transformatie_ voor verschillende dingen hebben gebruikt. We hebben het eerder gebruikt om _variabelen_ te transformeren (factoren hercoderen, getallen herschalen, enz.). Op dit moment gebruiken we het om _data_ te transformeren, wat betekent dat we het hebben over meerdere variabelen of volledige datasets. De woordkeuze is niet om je in verwarring te brengen, we doen eigenlijk hetzelfde, maar op verschillende niveaus.

Er zijn 2 eenvoudige transformaties:

1. 	Combineer variabelen
2.	Splits variabelen

en 2 moeilijke

3. 	Verspreid een dataset
4.	Verzamel een dataset

Hieronder tonen we schematisch - de makkelijke aan onderaan, en de moeilijke bovenaan. Laten we elk van hen bekijken. [^cheatsheet]

```{r echo = F, fig.width = 10}
knitr::include_graphics("images/operations2.png", dpi = NA)
```


[^cheatsheet]:  Merk op dat alle functies voor samenvoeging en transformatie die hier worden besproken, zijn opgenomen het formularium. Zorg ervoor dat je het kunt gebruiken tijdens oefeningen en examen!

### Unite variables

We gebruiken de functie `unite` wanneer we verschillende variabelen hebben die we willen combineren tot een enkele. De syntaxis voor unite is als volgt. Stel, we hebben informatie over studenten, met een voornaam en achternaam, en we willen één enkele "naam" variabele.

```{r echo = F}
set.seed(123)
students <- tibble(first_name = babynames::babynames %>% sample_n(10) %>% pull(name),
				   last_name = babynames::babynames %>% sample_n(10) %>% pull(name))
```


```{r}
students
```


```{r}
students %>%
	unite(col = name, first_name, last_name)
```

We specificeren eerst de naam voor de nieuwe kolom (die hier gewoon name is), daarna sommen we alle kolommen op die we willen verenigen. Merk op dat unite standaard een _ tussen de kolommen zet. We kunnen dit veranderen met het argument sep.

```{r}
students %>%
	unite(col = name, first_name, last_name, sep = " ")
```
Soms geven we er ook de voorkeur aan de oorspronkelijke variabelen te behouden. We kunnen vragen ze niet te verwijderen, als volgt.

```{r}
students %>%
	unite(col = name, first_name, last_name, sep  = " ", remove = F)
```

### Separate variables

Scheiden werkt andersom: het scheidt een enkele variabele in meerdere variabelen. Stel dat we een lijst hebben van studenten (students2) met hun volledige namen, en we willen ze scheiden. [^sep]

[^sep]: Let op hoe je `separate` spelt. Een e, gevolgd door een a, nog een a, en nog een e. Kun je dat onthouden? Gefeliciteerd, je hebt zojuist een aantal veelgemaakte fouten vermeden! 

```{r echo = F}
set.seed(456)
tibble(first_name = babynames::babynames %>% sample_n(10) %>% pull(name),
				   last_name = babynames::babynames %>% sample_n(10) %>% pull(name)) %>%
	unite(col = name, first_name, last_name, sep = " ") -> students_2

```
```{r}
students_2
```

We kunnen `separate` op een vergelijkbare manier gebruiken met `unit`. Vertel eerst welke kolom je gescheiden wilt hebben. Zeg dan in welke kolommen je de stukken wil zetten.[^col]

[^col]: Merk op dat het argument col in unite de nieuwe kolom is,  terwijl het argument col in separate de bestaande kolom! Merk ook op dat de nieuwe kolommen gecreëerd door separate moeten worden gegeven als een character vector, niet als een lijst van unquoted namen zoals we deden in unite.

```{r}
students_2 %>%
	separate(col = name, into = c("first_name","last_name"))
```

Standaard zal separate de kolommen splitsen op elk teken dat niet alfanumeriek is: alles behalve cijfers en letters. Dus, hij heeft correct spaties gebruikt, waarmee we perfect tevreden zijn. Als je dit wilt veranderen, kan je het sep argument opnieuw instellen. Wanneer er bijvoorbeeld een gecombineerde achternaam is zoals Janssen-Swilden, dan zou die gesplitst worden op het - teken. Dat willen we niet, dus we moeten tegen sep zeggen dat het alleen op spaties moet splitsen, dus sep = " ". 

Separate zal precies zoveel kolommen maken als het aantal namen dat je opgeeft in into. Als hij meer of minder stukken vindt dan dat aantal voor een waarneming, zal hij je daarvoor waarschuwen. Als er minder zijn, zal NA verschijnen, als er meer zijn, zullen de laatste worden weggegooid. Je kunt ook remove = F gebruiken om de originele variabelen te behouden. 

Tot zover unite en separate. Laten we ons nu eens concentreren op die moeilijke! 

### Spread data


We kunnen spread gebruiken om een paar variabelen - een _key_ en een _value_ - te nemen en ze over verschillende kolommen te verdelen: één voor elke _key_ met de overeenkomstige _value_ erin.

```{r echo = F, fig.width = 10}
knitr::include_graphics("images/spread.PNG", dpi = NA)
```

Als je het op dit moment hoort donderen in Keulen, dan wordt het misschien tijd om eerdere tutorials te herzien. Want spread hebben we eigenlijk al eerder gezien (Hebben we dat?) (Ja dat hebben we.)

Het volgende voorbeeld frist de boel misschien een beetje op.

```{r}
library(ggplot2)
diamonds %>%
	count(color, clarity)
diamonds %>%
	count(color, clarity) %>%
	spread(clarity, n)
```

Wanneer we gegevens _spreiden_, gaan we van een _lange_ dataset naar een _brede_ dataset. Kijk maar terug naar het voorbeeld en de schematische figuur. Zorg ervoor dat je dit onthoudt!


### Gather data

Als we spread al kenden, is `gather` een fluitje van een cent. Het doet het tegenovergestelde van spread. Hoe eenvoudig! Dus, met gather gaan we van een _brede_ dataset naar een _lange_ dataset, door verschillende waarnemingen te _verzamelen_ in één enkele.

Kijk maar naar dit cijfer.

```{r echo = F, fig.width = 10}
knitr::include_graphics("images/gather.PNG", dpi = NA)
```

Laten we eens kijken naar een voorbeeld.

De dataset hieronder toont de bevolking voor elk land op aarde na elk interval van 5 jaar, beginnend in 1952 en eindigend in 2007. 

```{r echo = F}
gapminder %>%
	select(country, year, pop, continent) %>%
	spread(year, pop) -> yearly_population
```


```{r}
yearly_population
```

Best een overzichtelijke tabel, nietwaar? Laten we een lijngrafiek maken van de evolutie. We zouden tijd (year) nodig hebben op de x-as en bevolking op de y-as. Maar...? Wel, f*ck! Die variabelen bestaan niet?! Hoe kan ik mijn lijngrafiek maken? 

Laten we de gegevens _verzamelen_ in die twee variabelen.

* Het belangrijkste argument is de __new__ variabele waarin we de oude variabelen willen hebben. In ons geval willen we alle jaren als een _time_ variabele, zodat we ze kunnen gebruiken, in plaats van ze te verspreiden over 12 variabelen. 
* Het value-argument is de __nieuwe__ variabele waarin de __waarden__ van de oude variabelen terechtkomen. Dit zouden dus de bevolkingsaantallen zijn, oftewel _population_. 
* Daarna geven we alle kolommen op die we willen verzamelen. In ons geval alle jaren. Gelukkig kunnen we ons typwerk besparen, en gewoon  zeggen dat we land en continent __niet__ willen verzamelen.[^columnames]

[^columnames]: Eigenlijk is er een belangrijkere reden waarom we -land en -continent willen gebruiken in plaats van alle jaren op te sommen, behalve dat we lui zijn. Weet je nog dat alle object- en variabelennamen in R moeten beginnen met een letter, niet met een cijfer? Wel, de jaar-kolommen doen dat duidelijk niet. Om ze te selecteren zou een speciale techniek nodig zijn. Gewoon 1952:2007 zeggen zou helaas niet werken. Maar, gelukkig, dat is een verhaal voor een andere keer.

Laten we eens kijken wat er gebeurt.

```{r}
yearly_population %>%
	gather(key = time, value = population, -country, -continent)
```
Voila, precies het tegenovergestelde van spreiding, is het niet? Een stel oude variabelen (1952, 1957, 1962, enz.) worden _verzameld_ in één nieuwe variabele _time_. Terwijl de inhoud van die oude variabelen ernaast wordt geplaatst in de _population_ variabele. 

Merk op hoe we van een dataset met 13 kolommen en 142 rijen (= BREED) zijn gegaan naar een dataset met slechts 3 kolommen maar 1704 rijen ( = LANG). 

Dus, laten we dit afronden. 

* Voor verzamelen (gather, breed naar lang): key en value zijn _nieuwe_ kolomnamen. Je kunt ze kiezen zoals je wilt (net zoals ik tijd en bevolking koos)
* Voor spreiden (spread, lang naar breed): key en value zijn _bestaande_ kolommen. Degenen die je wilt verspreiden.
* Bij gather geef je een lijst van _bestaande_ kolommen die je wilt verzamelen/combineren. Je kunt ook aangeven welke je niet wilt met -. In feite kun je hier alle select-trucs gebruiken. Als je niets zegt behalve key en value, worden alle kolommen verzameld.
* Bij spread zijn alleen key en value noodzakelijke argumenten.


Makkelijk, is het niet?

Helaas, nee. Dat is het niet. 

Spread en gather zijn waarschijnlijk de minst intuïtieve functies die je in deze cursus zult leren. Probeer deze paragraaf een paar keer te lezen, en kijk heel goed naar de voorbeelden. Probeer te zien wat er gebeurt. Dingen kunnen erg ingewikkeld worden met spread en gather, omdat ze de structuur van je gegevens volledig veranderen. Door ze te combineren met joins wordt het alleen maar moeilijker. Spendeer wat tijd aan het begrijpen van de functies, en leer hoe je de cheatsheet moet gebruiken. Nog belangrijker dan het verschil kennen tussen lange en brede datasets, is het begrijpen wanneer je elk van deze nodig hebt. 

De functies zijn helemaal niet gemakkelijk, maar je zult ze sneller nodig hebben dan je denkt. Laten we ze aan het werk zien in een ander voorbeeld. We zullen wat echte gegevens gebruiken van de World Hearlth Organisations WHO!

Oh, dat vergat ik bijna! We zouden een lijngrafiek maken van de bevolkingsgegevens. Wel, zie je, eens we gather gebruikt hebben hebben, wordt het gemakkelijk. We kunnen bijna direct naar ggplot gaan.

```{r fig.fullwidth = T, fig.width = 15}
yearly_population %>%
	gather(key = time, value = population, -country, -continent) %>%
	mutate(time = as.numeric(time)) %>%
	ggplot(aes(time, population/(10^9), group = country, color = continent)) +
	geom_line() +
	facet_grid(.~continent) +
	theme_light() +
	labs(y = "Population (in billion)") +
	theme(legend.position = "top")
```

Kan je vertellen welke landen de twee stijgende lijnen in Azië zijn? (Zeg me alsjeblieft van wel.)

Dus, laten we wat gezondheid bestuderen!

## [Case study]: WHO

Wij verzamelden (pun intended) gegevens over het aantal (nieuwe) tuberculosegevallen uitgesplitst naar

*	year
*	country
*	age (7 groepen)
*	gender
*	type of TB
	*	new/old -> (allemaal nieuw in dit voorbeeld)
	*	diagnosis method
		*	rel: relapse
		*	sp: smear positive
		*	sn: smear negative
		*	ep: extrapulmonary

(Je hoeft de verschillende diagnosemethoden niet te kennen.)

De gegevens zien er als volgt uit.

```{r echo = F}
data(who)
```
```{r}
who %>%
	glimpse()
```

Om eerlijk te zijn: nogal een puinhoop. We hebben toch niet echt 60 variabelen nodig voor de gegevens die we net beschreven? Wat is er aan de hand?

Het lijkt erop dat alle gegevens voor elk land en jaar op één rij staan. Laten we eens kijken.

```{r}
who %>%
	count(country, year)
```

We zien vooral eentjes. Laten we het voor de zekerheid controleren.

```{r}
who %>%
	count(country, year) %>%
	filter(n > 1)
```


Ok. Dus, elk jaar, elk land, één rij. We hebben 7240 rijen omdat we

```{r}
who %>% count(year) %>% nrow
```

34 jaren hebben, en

```{r}
who %>% count(country) %>% nrow()
```

219 landen. 

Dus verwachten we het volgende aantal rijen: 

```{r}
219*34
```

Het lijkt erop dat we 206 rijen missen. D.w.z. dat er landen zijn waarvoor we niet alle jaren hebben, of omgekeerd. Het is hier niet echt belangrijk, maar dit zijn het soort dingen die een goede data analist controleert. 

Laten we teruggaan naar ons probleem. 

Van de 60 variabelen geven de eerste 3 elk het land weer (herinner  dat ik vertelde dat er verschillende manieren zijn om een land af te korten), en de 4e bevat het jaar. Er blijven dus 56 variabelen over.

Welnu, we hebben informatie over 7 leeftijdsgroepen, 2 geslachten, en 4 diagnosemethoden. 7 maal 2 maal 4 is gelijk aan 56. Aha! Alle verschillende gevallen worden in een andere variabele gestopt. Dat is niet echt gemakkelijk om mee te werken. 

Waarom niet, hoorde ik je denken?

Laten we proberen de volgende vragen op te lossen.

* Hoeveel vrouwen ouder, 25 jaar of ouder in België werden gediagnosticeerd met TB in 2000? Hoeveel van hen hadden een terugval? 
* Wat is het totaal aantal TB-gevallen in België in elk jaar?
* Kan ja de evolutie van het aantal gevallen voor verschillende geslachten en leeftijdsgroepen grafisch weergeven?

Nee, dat kan je niet. Tenminste, niet zonder veel werk, of zonder onze gegevens op te transformeren. Dus, laten we beginnen. 

Het is vaak nuttig om na te denken over het formaat waarin we onze gegevens zouden willen hebben, zonder te verdwalen in de transformatie. Idealiter zouden we de volgende variabelen willen hebben:

*	country
*	year
*	is_new
*	diagnosis
*	gender
*	age
*	cases (het aantal TB-gevallen)

Laten we eerst naar een dataset in een lang formaat gaan, door alle verschillende soorten diagnoses en gevallen in een lange lijst te verzamelen. We zullen de eerste 4 kolommen niet verzamelen. De oude kolomnamen zullen een variabele "type" zijn, en de getallen zullen "gevallen" worden genoemd.

```{r}
who %>%
	gather(key = type, value = cases, -country:-year)
```

Zie je wat er gebeurd is? Kijk maar eens goed.

Had je al begrepen dat we eerst de data moesten verzamelen? Zo ja, gefeliciteerd, je begint te snappen wat data-transformatie is en welke transformaties je waar nodig hebt. Zo nee, maak je geen zorgen. Onthoud dat ik je vertelde dat dit een moeilijke vaardigheid is. Bovendien zijn er waarschijnlijk verschillende manieren om dit te doen.

We kunnen ons ontdoen van iso2 en iso3. Merk op dat ze nuttig kunnen zijn om de gegevens te verbinden met andere gegevens over landen, maar we hebben geen plannen om dat te doen. Laten we ze gewoon uit de weg ruimen.

```{r}
who %>%
	gather(key = type, value = cases, -country:-year) %>%
	select(-iso2, -iso3)

```

Nu, er is veel informatie in de `type` variabele. Eigenlijk zijn er meer variabelen in deze ene variabele. Laten we ze scheiden. (Zie je hoe dat denkproces gaat?) 

Laten we eerst eens kijken naar de verschillende niveaus door een snelle telling te doen.

```{r}
who %>%
	gather(key = type, value = cases, -country:-year) %>%
	select(-iso2, -iso3) %>%
	count(type) %>%
	print(n = Inf) # I want to see all of them
```

Oh sh*t. De eerste 42 levels zijn netjes gescheiden door 2 underscores. Maar de laatste niet. Het is overall "newrel" in plaats van "new_rel". Separate zal niet in staat zijn om dat te splitsen...

Dus, laten we een  truc uithalen. We gaan al het "newrel" teksten vervangen door "new_rel". Hoe? Met behulp van het `stringr` pakket voor string manipulatie. Het heeft een handige functie `str_replace`. Daar gaan we.

```{r}
who %>%
	gather(key = type, value = cases, -country:-year) %>%
	select(-iso2, -iso3) %>%
	mutate(type = str_replace(type, "newrel", "new_rel")) %>%
	count(type) %>%
	print(n = Inf)
```
Dat is beter, nietwaar? Trouwens, zie je hoe we op elk punt voortbouwen op wat we eerder deden? Op deze manier kunnen we gemakkelijk fouten veranderen als we er maken. Pas als onze gegevens correct zijn getransformeerd, slaan we ze op, en zetten we de code in ons loadscript. 

Maar nu kunnen we de gegevens scheiden. Het eerste deel wordt de is_new variabele, het tweede deel de diagnose variabele, en het laatste deel... wel, het bevat zowel het geslacht (f/m) als de leeftijdscategorie. Laten we het gewoon age_gender noemen, en dat probleem later aanpakken.

```{r}
who %>%
	gather(key = type, value = cases, -country:-year) %>%
	select(-iso2, -iso3) %>%
	mutate(type = str_replace(type, "newrel", "new_rel")) %>%
	separate(type, into = c("is_new", "diagnosis", "gender_age")) 
```

Cool, dat werkte! We hoefden niet eens te vertellen hoe we moesten splitsen. Hij besliste dit automagisch. Wat een slimmerik! 

Nu, laten we age_gender splitsen. Maar op wat? Er is geen karakter om op te splitsen. Maar, separate is zo slim, dat we het kunnen vertellen te splitsen na het _eerste_ teken - want dat is het geslacht, de rest is de leeftijd. We kunnen dit eigenlijk voor elk karakter doen. We hoeven alleen sep = _n_ in te stellen, waarbij _n_ ons getal is. In dit geval 1. Laten we het proberen!

```{r}
who %>%
	gather(key = type, value = cases, -country:-year) %>%
	select(-iso2, -iso3) %>%
	mutate(type = str_replace(type, "newrel", "new_rel")) %>%
	separate(type, into = c("is_new", "diagnosis", "gender_age")) %>%
	separate(gender_age, into = c("gender","age"), sep = 1)
```

Ik weet niet hoe het met jou zit, maar ik denk dat dit precies is hoe we de gegevens wilden hebben! Laten we het nu opslaan.


```{r}
who %>%
	gather(key = type, value = cases, -country:-year) %>%
	select(-iso2, -iso3) %>%
	mutate(type = str_replace(type, "newrel", "new_rel")) %>%
	separate(type, into = c("is_new", "diagnosis", "gender_age")) %>%
	separate(gender_age, into = c("gender","age"), sep = 1) -> tidy_who
```

En laten we voor ons plezier ook de vragen oplossen die we eerder hadden.

* Bij hoeveel vrouwen van 25 jaar of ouder in België werd in 2000 tbc vastgesteld? Hoeveel van hen hadden een terugval? 

```{r}
tidy_who %>%
	filter(gender == "f", !(age %in% c("014","1524")), country == "Belgium", year == 2000) %>%
	group_by(diagnosis) %>%
	summarize(n_cases = sum(cases, na.rm = T))
```
Volgens deze gegevens waren er 78 gevallen, en geen daarvan waren hervallen. 

* Wat is het totaal aantal TB-gevallen in België in elk jaar?


```{r}
tidy_who %>%
	filter(country == "Belgium") %>%
	group_by(year) %>%
	summarize(n_cases = sum(cases, na.rm = T))
```

(Het lijkt erop dat er vóór 1995 geen gevallen van TB in België waren. Of missen we gewoon gegevens? Wat is de invloed van na.rm? Wees voorzichtig.)

* Kan je de ontwikkeling van het aantal gevallen voor verschillende geslachten en leeftijdsgroepen grafisch weergeven?

```{r}
tidy_who %>%
	group_by(year, age, gender) %>%
	summarize(n_cases = sum(cases, na.rm = T)) %>%
	ggplot(aes(year, n_cases)) +
	geom_line(color = "pink4", lwd = 1) +
	facet_grid(gender~age) +
	theme_light()
```

